<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function symfony_mailer_bc_theme($existing, $type, $theme, $path) {
  $templateDir = drupal_get_path('module', 'symfony_mailer_bc') . '/templates';
  $hooks = [];
  foreach (glob("$templateDir/email--*") as $template) {
    $theme = strtr(basename($template, '.html.twig'), '-', '_');
    $hooks[$theme] = ['base hook' => 'email'];
  }

  return $hooks;
}

/**
 * Implements hook_mailer_builder_info_alter().
 */
function symfony_mailer_bc_mailer_builder_info_alter(array &$email_builders) {
  // Add EmailBuilder definitions for any implementations of hook_mail() that
  // don't already have one, using LegacyEmailBuilder.
  $module_handler = \Drupal::moduleHandler();
  $mail_hooks = $module_handler->getImplementations('mail');
  $missing = array_diff($mail_hooks, array_keys($email_builders));

  foreach ($missing as $type) {
    $email_builders[$type] = [
      'id' => $type,
      'label' => $module_handler->getName($type),
      'sub_types' => [],
      'has_entity' => FALSE,
      'class' => "Drupal\symfony_mailer_bc\Plugin\EmailBuilder\LegacyEmailBuilder",
      'provider' => $type,
    ];
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function symfony_mailer_bc_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Move our implementation to the end of the list.
    $value = $implementations['symfony_mailer_bc'];
    unset($implementations['symfony_mailer_bc']);
    $implementations['symfony_mailer_bc'] = $value;
  }
}

/**
 * Implements hook_form_alter().
 */
function symfony_mailer_bc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config_all = [
    'simplenews_admin_settings_newsletter' => [
      'remove' => ['simplenews_default_options', 'simplenews_sender_info'],
    ],
    'simplenews_admin_settings_subscription' => [
      'remove' => ['subscription_mail'],
      'type' => ['simplenews'],
    ],
    'simplenews_newsletter_edit_form' => [
      'remove' => ['email', 'simplenews_sender_information', 'simplenews_subject'],
      'entity' => ['node'],
    ],
  ];

  if ($config = $config_all[$form_id] ?? NULL) {
    $helper = Drupal::service('symfony_mailer.helper');

    // Hide fields that are replaced by Mailer Policy.
    foreach ($config['remove'] ?? [] as $key) {
      $form[$key]['#access'] = FALSE;
    }

    // Add policy elements on entity forms.
    if (!empty($config['entity'])) {
      $form['mailer_policy'] = $helper->renderEntityPolicy($form_state->getFormObject()->getEntity(), ...$config['entity']);
    }

    // Add policy elements on settings forms.
    if (!empty($config['type'])) {
      $form['mailer_policy'] = $helper->renderTypePolicy(...$config['type']);
    }
  }
}

/**
 * Implements hook_mailer_bc_MODULE_alter() for contact.
 */
function symfony_mailer_bc_mailer_bc_contact_alter(array &$message, ?ConfigEntityInterface &$entity) {
  if (isset($message['params']['contact_form'])) {
    // Set the associated config entity.
    $entity = $message['params']['contact_form'];
  }

  // This creates two separate email types, so no longer need the key to
  // contain page_ or user_.
  $message['key'] = substr($message['key'], 5);
}

/**
 * Implements hook_mailer_bc_MODULE_alter() for simplenews.
 */
function symfony_mailer_bc_mailer_bc_simplenews_alter(array &$message, ?ConfigEntityInterface &$entity) {
  if ($message['key'] == 'node' || $message['key'] == 'test') {
    // Set the associated config entity.
    $entity = $message['params']['simplenews_mail']->getNewsletter();

    // Remove the reply-to address because we use policy from this module
    // instead.
    $message['reply'] = '';

    // Use a parameter for 'test' rather than the key. We don't want test
    // email to use a different policy, template, and so on.
    $message['params']['test'] = ($message['key'] == 'test');
    $message['key'] = 'node';
  }
  elseif ($message['key'] == 'subscribe_combined') {
    $message['key'] = 'subscribe';
  }
}

/**
 * Implements hook_mailer_bc_MODULE_alter() for system.
 */
function symfony_mailer_bc_mailer_bc_system_alter(array &$message, ?ConfigEntityInterface &$entity) {
  // Simplify the params.
  $message['params'] = $message['params']['context'];
}

/**
 * Implements hook_mailer_bc_MODULE_alter() for user.
 */
function symfony_mailer_bc_mailer_bc_user_alter(array &$message, ?ConfigEntityInterface &$entity) {
  // Use the entity type as the parameter key.
  // @see \Drupal\symfony_mailer\EmailInterface::setParam()
  $message['params'] = ['user' => $message['params']['account']];
}

/**
 * Implements hook_mailer_bc_MODULE_alter() for user_registrationpassword.
 */
function symfony_mailer_bc_mailer_bc_user_registrationpassword_alter(array &$message, ?ConfigEntityInterface &$entity) {
  symfony_mailer_bc_mailer_bc_user_alter($message, $entity);
}
